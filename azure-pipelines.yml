trigger:
- master

resources:
- repo: self

variables:
- group: Staging
- name: 'dockerRegistryServiceConnection'
  value: '35b59438-4ac6-4bf2-9847-c51eedec84d9'
- name: 'imageRepository'
  value: 'swiphfbootcampappwithkubernetes'
- name: 'containerRegistry'
  value: 'containerregistryweek10.azurecr.io'
- name: 'dockerfilePath'
  value: '$(Build.SourcesDirectory)/Dockerfile'
- name: 'tag'
  value: '$(Build.BuildId)'
- name: imagePullSecret
  value: 'containerregistryweek1014786a28-auth'
- name: vmImageName
  value: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: bootcamp-pool-week10
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    variables: 
    - group: Staging
    pool:
      name: bootcamp-pool-week10
      vmImage: $(vmImageName)
    environment: 'SwiphfBootcampAppWithKubernetes.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'kubectl create secret generic my-secret \ --from-literal=TEST="testinggg"'
